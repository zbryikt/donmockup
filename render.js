// Generated by LiveScript 1.2.0
var x$;
x$ = angular.module('main');
x$.factory('render', function(){
  var ret;
  return ret = {
    color: d3.scale.category20(),
    toggle: function(it){
      var s;
      s = angular.element('body').scope();
      return s.mvote.toggle(it);
    },
    draw: function(data, node){
      var len, yscale, xscale, x$, y$, z$, z1$, z2$, z3$, z4$, this$ = this;
      len = data.length;
      yscale = d3.scale.linear().domain([0, len]).range([30, 570]);
      xscale = d3.scale.linear().domain([
        0, d3.max(data.map(function(it){
          return it.value;
        }))
      ]).range([30, 770]);
      x$ = d3.select(node).selectAll('rect.bar').data(data);
      x$.exit().remove();
      y$ = x$.enter().append('rect');
      y$.attr({
        'class': 'bar',
        x: function(v, i){
          return xscale(0);
        },
        y: function(v, i){
          return yscale(i);
        },
        width: 0,
        height: 0,
        fill: 'rgba(0,0,0,0)',
        cursor: 'pointer'
      });
      y$.on('click', function(d, i){
        return this$.toggle(d);
      });
      z$ = d3.select(node).selectAll('rect.bar');
      z1$ = z$.transition().duration(1000);
      z1$.attr({
        x: function(v, i){
          return xscale(0);
        },
        y: function(v, i){
          return yscale(i);
        },
        width: function(v, i){
          return xscale(v.value);
        },
        height: function(v, i){
          return yscale(i + 1) - yscale(i) - 5;
        },
        fill: function(d, i){
          return this$.color(d.name);
        }
      });
      z2$ = d3.select(node).selectAll('g.text').data(data);
      z2$.exit().remove();
      z3$ = z2$.enter().append('g').attr('class', 'text');
      z3$.each(function(d, i){
        var textInit, x$, y$;
        textInit = {
          x: function(v){
            return xscale(0);
          },
          y: function(v){
            return yscale(i);
          },
          "font-size": 0,
          "text-anchor": 'middle',
          "dominant-baseline": 'central',
          fill: 'rgba(255,255,255,0)',
          stroke: 'rgba(0,0,0,0)',
          cursor: 'pointer',
          "stroke-linecap": 'round',
          "stroke-linejoin": 'round',
          "stroke-width": 7
        };
        x$ = d3.select(this).append('text');
        x$.attr(textInit);
        x$.attr('class', 'stroke');
        x$.text(function(){
          return d.name + " ( " + d.value + " )";
        });
        y$ = d3.select(this).append('text');
        y$.attr(textInit);
        y$.attr('class', 'fill');
        y$.text(function(){
          return d.name + " ( " + d.value + " )";
        });
        y$.on('click', function(){
          return ret.toggle(d);
        });
        return y$;
      });
      z4$ = d3.select(node).selectAll('g.text');
      z4$.each(function(d, i){
        var textTarget, x$, y$, z$, z1$;
        textTarget = {
          x: function(){
            var ref$;
            return (ref$ = xscale(d.value / 2)) > 50 ? ref$ : 50;
          },
          y: function(){
            return (yscale(i + 1) + yscale(i)) / 2;
          },
          "font-size": 20
        };
        x$ = d3.select(this).selectAll('text.stroke');
        y$ = x$.transition().duration(1000);
        y$.attr(textTarget);
        y$.attr('stroke', 'rgba(0,0,0,1)');
        y$.text(function(){
          return d.name + " ( " + d.value + " )";
        });
        z$ = d3.select(this).selectAll('text.fill');
        z1$ = z$.transition().duration(1000);
        z1$.attr(textTarget);
        z1$.attr('fill', 'rgba(255,255,255,1)');
        z1$.text(function(){
          return d.name + " ( " + d.value + " )";
        });
        return z$;
      });
      return z4$;
    }
  };
});